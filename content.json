{"meta":{"title":"LAZY's BLOG","subtitle":null,"description":null,"author":"Zhen Liu","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"Python编程小结","slug":"ython编程小结","date":"2019-10-08T03:13:00.000Z","updated":"2019-10-08T03:23:20.820Z","comments":true,"path":"2019/10/07/ython编程小结/","link":"","permalink":"http://yoursite.com/2019/10/07/ython编程小结/","excerpt":"","text":"一维数组转变成二维数组通过reshape( )函数即可实现，假设data是numpy.array类型的一维数组array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])，现将其转变为2行5列的二维数组，代码如下：data.reshape((2,5)) 多维数组转变成一维数组将多维数组转换成一维数组的运算通常称为扁平化（flattening）或散开（raveling）,因此有两个函数可供选择。执行代码如下： data.ravel() # 不会产生源数据的副本 data.flatten() # 总是返回数据的副本 逆转矩阵将矩阵进行倒置 reversed_arr = arr[::-1] 常用矩阵np.ones((3, 2)) np.zeros((2, 3)) np.eye(3)#3维单位矩阵 y = np.array([4, 5, 6]) np.diag(y)#以y为主对角线创建矩阵 np.random.randint(0, 10, (4,3)) 输出矩阵中出现的元素import numpy as np def unique(a): a = np.sort(a) b = np.diff(a) b = np.r_[1, b] return a[b != 0]","categories":[],"tags":[{"name":"编程总结","slug":"编程总结","permalink":"http://yoursite.com/tags/编程总结/"}],"author":"Zhen Liu"},{"title":"实用网站总结","slug":"实用网站总结","date":"2019-07-10T15:43:00.000Z","updated":"2019-07-10T15:57:32.089Z","comments":true,"path":"2019/07/10/实用网站总结/","link":"","permalink":"http://yoursite.com/2019/07/10/实用网站总结/","excerpt":"","text":"python基础： Python学习笔记(Ⅰ)——Python程序结构与基础语法：https://www.cnblogs.com/rd-ddddd/p/8748980.html python函数的定义：https://www.cnblogs.com/jokerbj/p/7237081.html Python 将列表数据写入文件（txt, csv， excel）：https://blog.csdn.net/u010513327/article/details/80889846 相片相关： Python读取图片EXIF信息类库介绍和使用实例：https://blog.csdn.net/huobanjishijian/article/details/78537860 用Python PyQt写一个在线预览图片的GUI：https://www.jianshu.com/p/82ee5ad90684 简单VR照片 使用陀螺仪、姿态角（Roll、Pitch、Yaw ）、四元数实现：https://blog.csdn.net/u010203716/article/details/72837331 图片中的exif数据：http://www.mamicode.com/info-detail-1335836.html 大疆无人机参数解释YAW/Roll/Pitch：https://blog.csdn.net/qq_26923265/article/details/93883492 Exif格式分析：https://blog.csdn.net/lsiyun/article/details/5346754#t2 PyQt组件： pyqt5 graphics view简单使用：https://www.cnblogs.com/caiya/p/10328010.html QGraphicsScene入门一：基本介绍、场景定义、添加元素:https://blog.csdn.net/wishfly/article/details/79356053 QT：QGraphicsView QGraphicsScene QGraphicsItem理解：https://www.jianshu.com/p/e010be59f762 基于python3.6+pyQT5利用Graphics View 控件显示图像并实现其缩放：https://blog.csdn.net/weixin_39964552/article/details/82937144 PyQt5基本控件详解之QFileDialog(十六)：https://blog.csdn.net/jia666666/article/details/81560756 一些基本的类说明： Pillow（PIL）讲解：https://pillow.readthedocs.io/en/stable/ Piexif：https://piexif.readthedocs.io/en/latest/ python应用： PLY文件读取与显示：https://blog.csdn.net/u010281174/article/details/45131439 openMVG::sfm::SfM_Data数据结构形式总结：https://blog.csdn.net/potxxx/article/details/88566302 python处理二进制文件（.bin)：https://blog.csdn.net/and_then111/article/details/86744938 地图 天地图：http://lbs.tianditu.gov.cn/server/MapService.html 下载天地图切片地图：https://blog.csdn.net/staHuri/article/details/89487034 问题解决 出现错误：https://stackoverflow.com/questions/45793966/clicked-connect-error HEXO相关 Hexo写博客和Hexo Admin管理：https://www.jianshu.com/p/ee47432c7e37 Hexo语法总结：https://www.jianshu.com/p/56d99a3049a5 OpenGL应用 opengl绘制地图：https://blog.csdn.net/toxli/article/details/77948004 写给 python 程序员的 OpenGL 教程：https://blog.csdn.net/xufive/article/details/86565130 opengl嵌入pyqt5编译的分割窗口中：https://blog.csdn.net/ydsf521/article/details/80673699 基于OpenStreetMap与OpenGL的矢量地图三维重建：https://blog.csdn.net/z136411501/article/details/83051592","categories":[],"tags":[{"name":"编程总结","slug":"编程总结","permalink":"http://yoursite.com/tags/编程总结/"}],"author":"Zhen Liu"},{"title":"写在22岁","slug":"22岁","date":"2019-07-10T15:24:00.000Z","updated":"2019-07-10T15:27:58.153Z","comments":true,"path":"2019/07/10/22岁/","link":"","permalink":"http://yoursite.com/2019/07/10/22岁/","excerpt":"","text":"像是每年到这个时间，都会去记录这一年的变化。去年仿佛是大学时期成长的最快的时期，经历了许多，申请，毕业。这些人生的节点都在这一年，发生并且留下了很多或深或浅的影响。现在想想，这些过去的美好，正是自己现在不断前进的动力。想想，其实自己这一年也有挺多让自己欣慰的结果，让自己奔向一个更好的自己。体重恢复正常，申上了自己心仪的大学，自己家里情况的好转。我现在时常抱有感激之情，对这些在我身边陪着我，给予我力量的人都记在心里，有时会表达，有时怯于表达。有时候会说些祝福的话，有时候会给一些鼓励，但真的，很感谢你们出现在我的生命里。我最大的欣慰应该是心境和心态的成长吧。现在想想当年的自己还会为一些现在看起来很小的事而生气懊恼，为一件不必要的问题而担惊受怕，为一些怯懦而害怕去做一个领导者。现在的自己，学着心态放平。去做一些规划，去总结现在的一切，去承担自己可以努力而完成的事。虽然身上还有很多缺点，但是，那个方向，仍是我不断努力的终点。真的，时间过的好快，一晃就22了，自己也该去为自己的未来有一个规划了。仿佛那些欢愉还在昨日，而转眼间就被地理的距离而拉的好远。不知道明年的生日我会怎样度过，异国他乡的我会不会有着不一样的心态。新的一年仿佛处于迷雾之中，而我正尽力去找寻属于自己的光。这应该是这几年写的最务实的一次总结了，但内核我希望还没变。那个总是喊着“盛装端热油”的男孩，那个及时行乐然后又后悔不已的男孩，那个想着特立独行，独树一帜的男孩，还会在我的心里。如果说，对这一年有什么期待的话，希望自己能离自己的理想的生活更近一点，去努力的让自己更强，去照顾那些爱我的我爱的人。","categories":[],"tags":[{"name":"生活感怀","slug":"生活感怀","permalink":"http://yoursite.com/tags/生活感怀/"}],"author":"Zhen Liu"},{"title":"关于Python中的lambda的一些解析","slug":"于Python中的lambda的一些解析","date":"2019-07-10T14:15:00.000Z","updated":"2019-07-10T14:29:41.535Z","comments":true,"path":"2019/07/10/于Python中的lambda的一些解析/","link":"","permalink":"http://yoursite.com/2019/07/10/于Python中的lambda的一些解析/","excerpt":"","text":"lambda是Python编程语言中使用频率较高的一个关键字。那么，什么是lambda？它有哪些用法？网上的文章汗牛充栋，可是把这个讲透的文章却不多。这里，我们通过阅读各方资料，总结了关于Python中的lambda的“一个语法，三个特性，四个用法，一个争论”。 一个语法在Python中，lambda的语法是唯一的。其形式如下： lambda argument_list: expression 其中，lambda是Python预留的关键字，argument_list和expression由用户自定义。具体介绍如下。 这里的argument_list是参数列表，它的结构与Python中函数(function)的参数列表是一样的。具体来说，argument_list可以有非常多的形式。例如：·a, b·a=1, b=2·args·*kwargs·a, b=1, *args·空 这里的expression是一个关于参数的表达式。表达式中出现的参数需要在argument_list中有定义，并且表达式只能是单行的。以下都是合法的表达式： ·1 ·None ·a + b ·sum(a) ·1 if a >10 else 0 ...... 这里的lambda argument_list: expression表示的是一个函数。这个函数叫做lambda函数。 三个特性lambda函数有如下特性： lambda函数是匿名的：所谓匿名函数，通俗地说就是没有名字的函数。lambda函数没有名字。 lambda函数有输入和输出：输入是传入到参数列表argument_list的值，输出是根据表达式expression计算得到的值。 lambda函数一般功能简单：单行expression决定了lambda函数不可能完成复杂的逻辑，只能完成非常简单的功能。由于其实现的功能一目了然，甚至不需要专门的名字来说明。 下面是一些lambda函数示例： lambda x, y: xy；函数输入是x和y，输出是它们的积xy lambda:None；函数没有输入参数，输出是None lambda *args: sum(args); 输入是任意个数的参数，输出是它们的和(隐性要求是输入参数必须能够进行加法运算) lambda **kwargs: 1；输入是任意键值对参数，输出是1 四个用法由于lambda语法是固定的，其本质上只有一种用法，那就是定义一个lambda函数。在实际中，根据这个lambda函数应用场景的不同，可以将lambda函数的用法扩展为以下几种： 将lambda函数赋值给一个变量，通过这个变量间接调用该lambda函数。 例如，执行语句add=lambda x, y: x+y，定义了加法函数lambda x, y: x+y，并将其赋值给变量add，这样变量add便成为具有加法功能的函数。例如，执行add(1,2)，输出为3。 将lambda函数赋值给其他函数，从而将其他函数用该lambda函数替换。 例如，为了把标准库time中的函数sleep的功能屏蔽(Mock)，我们可以在程序初始化时调用：time.sleep=lambda x:None。这样，在后续代码中调用time库的sleep函数将不会执行原有的功能。例如，执行time.sleep(3)时，程序不会休眠3秒钟，而是什么都不做。 将lambda函数作为其他函数的返回值，返回给调用者。 函数的返回值也可以是函数。例如return lambda x, y: x+y返回一个加法函数。这时，lambda函数实际上是定义在某个函数内部的函数，称之为嵌套函数，或者内部函数。对应的，将包含嵌套函数的函数称之为外部函数。内部函数能够访问外部函数的局部变量，这个特性是闭包(Closure)编程的基础，在这里我们不展开。 将lambda函数作为参数传递给其他函数。 部分Python内置函数接收函数作为参数。典型的此类内置函数有这些。 filter函数。此时lambda函数用于指定过滤列表元素的条件。例如filter(lambda x: x % 3 == 0, [1, 2, 3])指定将列表[1,2,3]中能够被3整除的元素过滤出来，其结果是[3]。 sorted函数。此时lambda函数用于指定对列表中所有元素进行排序的准则。例如sorted([1, 2, 3, 4, 5, 6, 7, 8, 9], key=lambda x: abs(5-x))将列表[1, 2, 3, 4, 5, 6, 7, 8, 9]按照元素与5距离从小到大进行排序，其结果是[5, 4, 6, 3, 7, 2, 8, 1, 9]。 map函数。此时lambda函数用于指定对列表中每一个元素的共同操作。例如map(lambda x: x+1, [1, 2,3])将列表[1, 2, 3]中的元素分别加1，其结果[2, 3, 4]。 reduce函数。此时lambda函数用于指定列表中两两相邻元素的结合条件。例如reduce(lambda a, b: ‘{}, {}’.format(a, b), [1, 2, 3, 4, 5, 6, 7, 8, 9])将列表 [1, 2, 3, 4, 5, 6, 7, 8, 9]中的元素从左往右两两以逗号分隔的字符的形式依次结合起来，其结果是’1, 2, 3, 4, 5, 6, 7, 8, 9’。 另外，部分Python库函数也接收函数作为参数，例如gevent的spawn函数。此时，lambda函数也能够作为参数传入。 一个争议事实上，关于lambda在Python社区是存在争议的。Python程序员对于到底要不要使用lambda意见不一致。 支持方认为使用lambda编写的代码更紧凑，更“pythonic”。 反对方认为，lambda函数能够支持的功能十分有限，其不支持多分支程序if…elif…else…和异常处理程序try …except…。并且，lambda函数的功能被隐藏，对于编写代码之外的人员来说，理解lambda代码需要耗费一定的理解成本。他们认为，使用for循环等来替代lambda是一种更加直白的编码风格。 关于lambda的争执没有定论。在实际中，是否使用lambda编程取决于程序员的个人喜好。 以上就是我们总结的关于Python中的lambda的“一个语法，三个特性，四个用法，一个争论”。","categories":[],"tags":[{"name":"编程总结","slug":"编程总结","permalink":"http://yoursite.com/tags/编程总结/"}],"author":"Zhen Liu"},{"title":"从jpg中读取XMP文件","slug":"从jpg中读取XMP文件","date":"2019-07-10T14:04:00.000Z","updated":"2019-07-10T14:13:46.183Z","comments":true,"path":"2019/07/10/从jpg中读取XMP文件/","link":"","permalink":"http://yoursite.com/2019/07/10/从jpg中读取XMP文件/","excerpt":"","text":"对于使用无人机的用户来说，如何导出xmp文件（从而获得pitch，roll，yaw三个角度）是很大的问题。大多用户在windows下编程，所以对于要在linux下安装的python-xmp-toolkit是无法实现的，在这里我采用了一种python+PIL库的方法。以下是相关代码： 1234567891011121314151617181920212223242526from PIL import Imageimport reimport osdef XMLextract(MyPath): if MyPath==&quot;&quot;: pass else: for root, dir, files in os.walk(MyPath): for filename in files: with Image.open(os.path.join(root,filename)) as im: for segment, content in im.applist: marker, body = content.split(b&apos;\\x00&apos;, 1) if segment == &apos;APP1&apos; and marker == b&apos;http://ns.adobe.com/xap/1.0/&apos;: # parse the XML string with any method you like str1 = str(body, encoding=&quot;utf-8&quot;) p1 = re.compile(r&apos;[&lt;](.*?)[&gt;]&apos;, re.S) listXMP = re.findall(p1, str1) list1 = listXMP[3].split(&apos;\\n&apos;) for itemdata in list1: list2 = itemdata.strip().split(&apos;=&apos;) print(list2[0] + &quot;: &quot; + list2[1][1:-1])if __name__ == &apos;__main__&apos;: fileName = &apos;E:/project314/Phobuild/qinghuamen/images2&apos; XMLextract(fileName) 利用到re正则表达式，文中list2[0]指条目，list2[1]指所对应的值，导出即为需要的相关结果。","categories":[],"tags":[{"name":"编程总结","slug":"编程总结","permalink":"http://yoursite.com/tags/编程总结/"}],"author":"Zhen Liu"},{"title":"C#类中this的用法","slug":"-类中this的用法","date":"2019-07-09T09:30:00.000Z","updated":"2019-07-09T09:38:39.743Z","comments":true,"path":"2019/07/09/-类中this的用法/","link":"","permalink":"http://yoursite.com/2019/07/09/-类中this的用法/","excerpt":"","text":"在类中this主要有两种用法，this表示在类中调用成员函数或者成员变量的类对象，为了区分调用成员函数还是成员变量，需要用到this，比如建一个Person的类，含成员变量 name，age，address；含成员函数talk(); 12345678class Person&#123; String name; int age ; String address；void talk(String name)&#123; System.out.println(&quot;my name is &quot;+this.name); &#125;&#125; 创建一个类对象并调用成员函数。 123Person p1=new Person();p1.name=&quot;zhangsan&quot;p1.talk(&quot;lisi&quot;); 此时给name赋了两个值，一个给成员变量赋值zhangsan，一个是给成员函数的参数赋值lisi，这里就考虑成员函数输出中调用的是成员变量还是成员函数的参数，在使用this的情况下，结果为my name is zhangsan可以看到这里调用的是成员变量，而不带this的情况下，结果为my name is lisi可以看到这里调用的是成员函数的参数，因此使用this可以区分调用类成员变量和类成员函数中的参数，this代表调用成员函数的对象。 this的另一种用法是在类内的一个构造函数中调用类内的另一个构造函数，比如类内有两个构造函数一个带有两个参数一个带有三个参数，可以在带有三个参数的构造函数里调用带有两个参数的构造函数，以实现对部分成员变量的赋值。 1234567Person(String name , int age)&#123;&#125;Person(String name,int age,String address)&#123; this.Person(name，age)； this.age=age；&#125; 这里在构造函数里的参数name，age，address与成员变量重名，由this的第一个用法可以知道，使用this.name可以表示调用类的成员变量，因此在带有三个参数的构造函数中的this.age=age表示把构造函数参数的值赋值给类的成员变量，若要在带有三个参数的构造函数中使用其中两个参数给成员变量赋值，这样可以也仅可在第一行调用含有两个参数的构造函数来减少重复赋值。","categories":[],"tags":[{"name":"C#提高","slug":"C-提高","permalink":"http://yoursite.com/tags/C-提高/"}],"author":"Zhen Liu"},{"title":"python列表，字典和元组","slug":"thon列表，字典和元组","date":"2019-07-09T05:53:00.000Z","updated":"2019-07-09T05:58:55.033Z","comments":true,"path":"2019/07/09/thon列表，字典和元组/","link":"","permalink":"http://yoursite.com/2019/07/09/thon列表，字典和元组/","excerpt":"","text":"python语言最常见的括号有三种，分别是：小括号( )、中括号[ ]和大括号也叫做花括号{ }，分别用来代表不同的python基本内置数据类型。 1、python中的小括号( )：代表tuple元组数据类型，元组是一种不可变序列。 123&gt;&gt;&gt; tup = (1,2,3) &gt;&gt;&gt; tup (1, 2, 3) 2、python中的中括号[ ]，代表list列表数据类型： 12&gt;&gt;&gt; list(&apos;python&apos;) [&apos;p&apos;, &apos;y&apos;, &apos;t&apos;, &apos;h&apos;, &apos;o&apos;, &apos;n&apos;] 3、python大括号{ }花括号：代表dict字典数据类型，字典是由键对值组组成。冒号’:’分开键和值，逗号’,’隔开组。用大括号创建的方法如下： 1234&gt;&gt;&gt; dic=&#123;&apos;jon&apos;:&apos;boy&apos;,&apos;lili&apos;:&apos;girl&apos;&#125; &gt;&gt;&gt; dic &#123;&apos;lili&apos;: &apos;girl&apos;, &apos;jon&apos;: &apos;boy&apos;&#125; &gt;&gt;&gt;","categories":[],"tags":[{"name":"编程总结","slug":"编程总结","permalink":"http://yoursite.com/tags/编程总结/"}],"author":"Zhen Liu"},{"title":"python os.walk的用法","slug":"ython-os-walk的用法","date":"2019-07-09T02:01:00.000Z","updated":"2019-07-09T02:23:54.934Z","comments":true,"path":"2019/07/08/ython-os-walk的用法/","link":"","permalink":"http://yoursite.com/2019/07/08/ython-os-walk的用法/","excerpt":"","text":"概述os.walk() 方法用于通过在目录树中游走输出在目录中的文件名，向上或者向下。os.walk() 方法是一个简单易用的文件、目录遍历器，可以帮助我们高效的处理文件、目录方面的事情。在Unix，Windows中有效。语法walk()方法语法格式如下：os.walk(top[, topdown=True[, onerror=None[, followlinks=False]]])参数top – 是你所要遍历的目录的地址, 返回的是一个三元组(root,dirs,files)。root 所指的是当前正在遍历的这个文件夹的本身的地址dirs 是一个 list ，内容是该文件夹中所有的目录的名字(不包括子目录)files 同样是 list , 内容是该文件夹中所有的文件(不包括子目录)topdown –可选，为 True，则优先遍历 top 目录，否则优先遍历 top 的子目录(默认为开启)。如果 topdown 参数为 True，walk 会遍历top文件夹，与top 文件夹中每一个子目录。onerror – 可选，需要一个 callable 对象，当 walk 需要异常时，会调用。followlinks – 可选，如果为 True，则会遍历目录下的快捷方式(linux 下是软连接 symbolic link )实际所指的目录(默认关闭)，如果为 False，则优先遍历 top 的子目录。返回值该方法没有返回值。实例以下实例演示了 walk() 方法的使用： 123456789#!/usr/bin/python# -*- coding: UTF-8 -*-import osfor root, dirs, files in os.walk(&quot;.&quot;, topdown=False): for name in files: print(os.path.join(root, name)) for name in dirs: print(os.path.join(root, name)) 执行以上程序输出结果为： 123456789101112./.bash_logout./amrood.tar.gz./.emacs./httpd.conf./www.tar.gz./mysql.tar.gz./test.py./.bashrc./.bash_history./.bash_profile./tmp./tmp/test.py","categories":[],"tags":[{"name":"编程总结","slug":"编程总结","permalink":"http://yoursite.com/tags/编程总结/"}],"author":"Zhen Liu"},{"title":"QListView&QListWidget的区别","slug":"ListView-QListWidget的区别","date":"2019-07-08T13:47:00.000Z","updated":"2019-07-08T13:48:54.154Z","comments":true,"path":"2019/07/08/ListView-QListWidget的区别/","link":"","permalink":"http://yoursite.com/2019/07/08/ListView-QListWidget的区别/","excerpt":"","text":"QListView 里没有自己的”模型”要自己建模来保存数据,这可以很大程度上降低数据冗余,提高程序的效率.但是要求我们对view/model框架比较了解,不适合新手使用. QListWidget是QListView的子类,在QListWidget中已经帮我们定义好了一个模型.这个模型非常方便,十分全面.这样就可以直接在QListWidget里面添加数据,而不用在从新制定一个模型了.十分方便. 其实QListView和QListWidget的主要区别就是有木有自己的模型而已.","categories":[],"tags":[{"name":"编程总结","slug":"编程总结","permalink":"http://yoursite.com/tags/编程总结/"}],"author":"Zhen Liu"},{"title":"Carole&Tuesday","slug":"Carole-Tuesday","date":"2019-07-04T08:59:00.000Z","updated":"2019-07-04T09:46:53.426Z","comments":true,"path":"2019/07/04/Carole-Tuesday/","link":"","permalink":"http://yoursite.com/2019/07/04/Carole-Tuesday/","excerpt":"","text":"","categories":[],"tags":[{"name":"剪影","slug":"剪影","permalink":"http://yoursite.com/tags/剪影/"}],"author":"Zhen Liu"},{"title":"OBJ，DLL，LIB，EXE之间的关系","slug":"OBJ，DLL，LIB，EXE之间的关系","date":"2019-07-04T01:33:00.000Z","updated":"2019-07-08T13:49:07.087Z","comments":true,"path":"2019/07/03/OBJ，DLL，LIB，EXE之间的关系/","link":"","permalink":"http://yoursite.com/2019/07/03/OBJ，DLL，LIB，EXE之间的关系/","excerpt":"","text":"OBJ是中间代码文件、LIB是静态库文件、DLL是动态库文件、EXE是可执行文件。 对于静态库文件，链接的时候把其中需要的东西抽取出来嵌入到EXE中，EXE较大。 对于动态库文件，EXE执行的时候依赖于DLL提供的功能，没有DLL则EXE无法执行，EXE较小。 一个C或CPP文件被编译后既是一个OBJ，当所有必须要的C或CPP都被编译成OBJ后再统一链接成EXE。 LIB或DLL可以被看成是一堆OBJ的组合，发布后可以被链接入其它EXE或被其它EXE调用。 LIB不可以调用其它LIB或DLL，DLL可以调用其它LIB或DLL。 动态库有LIB文件和DLL文件。LIB文件必须在编译期就被链接到应用程序中，而DLL在运行期才会被调用。如果有DLL文件，则对应的LIB文件一般是一些索引信息，具体的实现在DLL文件中。如果只有LIB文件，那么这个LIB文件是静态库文件，索引和实现都在其中。静态库文件有好处，给用户安装时就不需要再挂动态库了；但也有缺点，即导致EXE较大且失去了动态库的灵活性，在版本升级时，同时要发布新的EXE才行。 在动态库的情况下，有两个文件，一个是LIB文件、一个是DLL文件，LIB文件包含被DLL导出的函数的名称和位置，DLL包含实际的函数和数据，应用程序使用LIB文件链接到所需要使用的DLL文件，库中的函数和数据并不复制到可执行文件中，因此在EXE文件中存放的不是被调用的函数代码，而是DLL中所要调用的函数的内存地址，这样当一个或多个应用程序运行时再把程序代码和被调用的函数代码链接起来，从而节省了内存资源。","categories":[],"tags":[{"name":"编程总结","slug":"编程总结","permalink":"http://yoursite.com/tags/编程总结/"}],"author":"Zhen Liu"},{"title":"如何hexo admin上传文章","slug":"如何hexo-admin上传文章","date":"2019-07-03T13:14:00.000Z","updated":"2019-07-03T13:15:10.565Z","comments":true,"path":"2019/07/03/如何hexo-admin上传文章/","link":"","permalink":"http://yoursite.com/2019/07/03/如何hexo-admin上传文章/","excerpt":"","text":"进入hexo文件夹，右键git bash 输入hexo server 然后在网页中输入localhost:4000/admin/，进入网页编辑模式 上传文章，注意打标签的时候记得点回车，不然不算 最后deploy，进行上传","categories":[],"tags":[{"name":"编程总结","slug":"编程总结","permalink":"http://yoursite.com/tags/编程总结/"}],"author":"Zhen Liu"},{"title":"毕业小感","slug":"毕业小感","date":"2019-07-03T12:40:00.000Z","updated":"2019-07-03T12:54:47.133Z","comments":true,"path":"2019/07/03/毕业小感/","link":"","permalink":"http://yoursite.com/2019/07/03/毕业小感/","excerpt":"","text":"一下子就毕业了，好像前几天还在上课（准备答辩），答辩就像一个课程设计，做完这个之后又会有新的课，然后接着上课，下课，出去玩。 不像高中时有这漫长假期的消殆过度渲染的感情，大学的分离就像镇痛，膏药一撕，就结束了。来不及去相聚，来不及去说再见。以前匆匆走过的校园，现在也慢慢的觉得流连。 顿时我不知道该怎么说再见了，抱头痛哭还是互诉衷肠，只能怔怔的看着他们离去。除非那些很是确认的友好，其他的那些都会小心的去试探，怕自己过度投入了，双方都尴尬。 大学里的好朋友很多，很感谢他们在我的大学生活中留下了美好的一页。真的心存感激，但怎么表达呢？不知道，只能抓住每一次和他们相聚的机会，以期能多留下些美好的回忆。 我喜欢和人合影，因为短暂的咔擦声就能记录这一瞬的感受。当回望时，你会发现，这些美好的回忆都是真实的，也可慰藉在孤独时自己无助的心。 现在的我，坐在空无一人的寝室，想想，这些回忆总会慢慢的淡去，内心的纠结，彷徨，怀恋，失望也会在时间的蹂躏下渐渐流逝，取而代之的是，新的感受，新的期待。 很庆幸高中结束仍然有那些朋友会记得我，而我也相信，大学的结束并不意味着众多挚友的结束。那些真正与自己有着特殊联系的人，不论你走的再远，时间再久，只要内核不变，那些往日的快乐和幸福，也将会在未来的某一个时刻，随着相遇的产生，持续蔓延。 人总会经历一段段复杂的感受，不知道如何去感悟，不知道如何释怀。诗人选择写成诗歌，音乐家选择谱成曲唱出来，工作狂选择用工作麻痹自己。而最后一项往往是大家选择的方式，逃避，很轻松，等到渐渐淡忘，那些胡思乱想，那些庸人自扰，都仿佛没了寄托的地方，就渐渐没了。可是我现在发现，去不时的回想，或许也是一种释放，哭就哭，难受就难受，你会想明白这段时光有什么你一直放不下的，你会倍加珍惜。不要沉溺，不要逃避，和自己做最好的朋友。结果如何，还是等时间告诉。","categories":[],"tags":[{"name":"生活感怀","slug":"生活感怀","permalink":"http://yoursite.com/tags/生活感怀/"}],"author":"Zhen Liu"},{"title":"0702谈话总结","slug":"0702谈话总结","date":"2019-07-03T12:38:00.000Z","updated":"2019-07-03T12:55:01.066Z","comments":true,"path":"2019/07/03/0702谈话总结/","link":"","permalink":"http://yoursite.com/2019/07/03/0702谈话总结/","excerpt":"","text":"学会合作，去积攒自己的实力，当你有好的主意，实力会成为你完成你理想的敲门砖，你的朋友也会成为你成功路上重要的伙伴，找到他们，记住他们，和他们合作。 未来不管方向如何，保持创新（积极的想法，考虑两面性的能力，远处的习以为常可以成为近处的创业之道）时刻告诉自己，哪里都可以有创造的火花，抓住并且让他不断燃烧。 保持联系，和朋友保持联系，了解内外的差异，更新彼此的信息。 在海浪翻滚的大海下，总有沉静安定的海体，要去从容应对上下翻滚的海浪，不忘坚持千米以下的广阔宁静（理解很多，目前的理解是在面对生活周遭，心情起伏，要从容地应对这些会影响你状态的事，但是与此同时，伟大的目标，平和的心性要一直坚持） 人际关系。关于人际，首先要做的是不去做无用功的交际，浪费时间去和无关紧要的人应酬交道。不如提升自己，让自己变得更强，去帮助那些真正关心你陪伴你的人。（舍己从人） 喜欢的生活和舒适圈的思考。毁掉一个人最好的方式就是让他过喜欢的生活？有疑问，如果单从走出舒适圈的话来说，我赞成，但喜欢的生活不等于不走出舒适圈。等看了具体的文章再说吧。 往期陈庭讲话 李政道的导师，每天只问他今天做了什么+明天要做什么！！！ 想法多且要去尝试，不要害怕失败，这只是一种经历，只要有一个成功了，都值得骄傲。形成固定的积极的思维方式，不要让自己害怕失败！ 交换思维。 看人，徳，能，学习能力！！！","categories":[],"tags":[{"name":"陈老师谈话","slug":"陈老师谈话","permalink":"http://yoursite.com/tags/陈老师谈话/"}],"author":"Zhen Liu"},{"title":"0610谈话总结","slug":"0610谈话总结","date":"2019-06-11T15:54:00.000Z","updated":"2019-06-11T16:10:21.410Z","comments":true,"path":"2019/06/11/0610谈话总结/","link":"","permalink":"http://yoursite.com/2019/06/11/0610谈话总结/","excerpt":"","text":"中美贸易关系紧张，之后可能会恶化，做好风险预估，提升个人能力 思考方式总结，不仅要做技术上的总结，还要对思考方式有个总结，减少下次走同样次等思考方式的几率 身体健康很重要，安全第一。 往期对话部分回忆： 状态是一个人一直要修炼的地方，心态放慢，手要快。宠辱不惊。 领导能力和合作能力是以后要努力的地方。 有规划，不只是长期的，还有短期的。去为你想过的生活努力，存在危机意识，居安思危。 架构很重要，将一个大型的东西分块，就可以把每个部分分给不同的人做，一起去完成一项浩大的工程。","categories":[],"tags":[{"name":"陈老师谈话","slug":"陈老师谈话","permalink":"http://yoursite.com/tags/陈老师谈话/"}],"author":"Zhen Liu"},{"title":"路边的鼓掌者","slug":"路边的鼓掌者","date":"2019-06-11T15:43:00.000Z","updated":"2019-06-11T15:43:59.273Z","comments":true,"path":"2019/06/11/路边的鼓掌者/","link":"","permalink":"http://yoursite.com/2019/06/11/路边的鼓掌者/","excerpt":"","text":"不知过了多久，才发现自己出神。望着讲桌前的你，正做着期末演讲。你微笑着，棕色的瞳仁闪着睿智的光。讲台下，每个人仰着头，专注的听着，教室里的氛围，温暖而美好。 我坐在那，望着你，发现你原本青涩的脸庞已略显成熟，身体消瘦，却仿佛藏着巨大的能量。一瞬，三年，我们终于走到高中的尽头。老板组织的这次演讲，也正是为了最后让大家聚聚，而作为第一的你，不出意料的被选中。而我，只是在台下默默地做一个听众。你话音刚落，教室里变响起雷鸣般的掌声，我抬起冻僵的双手，为你鼓掌，尽管掌声淹没在潮水之中，尽管手掌拍得生疼，我依旧鼓着。因为，由衷地，我欣赏你。 无疑，你是成功者，实至名归的成功者。而我见证了你成功背后的艰辛。我曾见你在无人的教室奋笔疾书，曾见你在花开的树下颂者精美的文字，曾见你在宁静的湖边编织华美的篇章。而我，只是在听课时无缘无故的走神，在慵懒的下午描绘秋日的风景，在静谧的夜晚听着歌雕琢时光。所以，我总认为，人生的道路上，你奔跑着，我只是站在路边，鼓着掌，与你擦身而过。 我曾问你，毕业后想上什么大学，你浅浅一笑，说想去北方。我突然有一种想追随你的冲动，就像萤火虫向着明星一般。可是，我知道，无论我如何努力的追赶，与你都是咫尺天涯，无法企及。为何不在你的生命里只做一个鼓掌者呢？之后，我变了，不再浪费光阴在无用的事上，不再关心周围的纷繁世事，不再艳羡他人的耀眼光环。只是静下心来，全身心投入，做一个让自己满意的自己。 曾经，我是一个仰望着，在你那墨夜的星辰下，驻足欣赏。不过，在茫茫黑夜中，我学会匍匐前行。在与你相反的方向，为你鼓掌。而今天，我坐在这，望着你，不觉时光早已为我们的人生描绘出不同的轨迹。身份的不同，让你我选择了不同的道路。现在的我，才发现。即便站在路边鼓掌，也是青春中的一份明媚的幸福啊！ 最终，你北上，我南下。 最终，“你我相逢在黑夜的海上，你有你的，我有我的方向，你记得也好，最好你忘掉，这交会时互放的光亮。” 最终，我还是站在夏意阑珊的街头，望着你渐行渐远的身影，回想起高考前的最后一次演讲，仍然情不自禁地为你鼓掌。然后，转身，朝着自己的方向，独自前行。","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}],"author":"Zhen Liu"},{"title":"北极","slug":"北极","date":"2019-06-11T15:24:00.000Z","updated":"2019-06-11T15:35:05.138Z","comments":true,"path":"2019/06/11/北极/","link":"","permalink":"http://yoursite.com/2019/06/11/北极/","excerpt":"","text":"两个人互相拥抱着，看着窗外的星空。 “你有没有想过我会离开你？”女孩问道。 男孩沉默，他不知道。他们两个就像天生注定要在一起一样，从没有分歧也没有过争吵。在男孩心中，接下来的故事就是结婚生子，相伴终老。她这么一问，他竟慌了手脚，口里结结巴巴，“没，没有，我相信我们会相伴到老的，我们还会有一个……”女孩没等他说完就抱紧了他，男孩也停止了说话，轻轻地抚着她的头发。 第二天，男孩醒来，女孩没在，他拨她的电话，停机。她就像消失了一样，没了踪影。他发了疯似的找她，无果还是无果。他落魄地走在街头，回想着她走的前一天说的话，“我发现我越来越离不开你了！”，“我们就这样一直下去好不好”，“你会不会和我去我想去的地方去度蜜月”，“我想去北极，听说那里可以看见极光，我最喜欢看极光了”，“我也担心你一个人去旅行”，“你有没有想过我会离开你”。北极，她可能在北极，男孩仿佛抓到了一丝线索，飞也似地打听怎样可以去北极。 “你这体质，至少要训练一年才能去啊。”有关机构的管理人员这样打发他，于是他一年内拼命地训练，每天强迫着自己，锻炼着自己的生存、协调、忍耐等等的能力。唯一可以给他慰藉的是，每天回到女孩的房间，可以看到女孩的照片和她写的日记。 日记刚好是从一年前记的，他就每天看一篇，等他看完这些日记就可以去找她了。 “2016年5月21日 晴 我终于和他在一起了，我希望可以和他生生世世永不分离。” “2016年6月13日 晴 现在才知道为什么那么多人都想着和自己的一半，去外面逛街，可是今天买了好多东西，特别是化妆品，嘻嘻，还是要好好保养啊。” “2016年8月25日 无” “2016年9月4日 雨 我发现和他在一起好累，可是他却和我存在不可跨越的代沟，真是搞不懂，为什么要让我喜欢上他。” “2016年12月31日 雨 还是不要告诉他了，我不希望他伤心，不想让他对我失望。” “2017年4月11日 晴 我发现我已经离不开他了，每天和他在一起好开心。” “2017年4月12日 雨 我爱过，就这样吧。” 等到她离开的一个月前，日记突然停止了 。接下来的一个月，男孩一直在想为什么，女孩从来没对她说过，他一直以为他们就是这样的合拍，没想到她居然有这么多委屈，没和自己说，他把自己的话都写在一张纸上，准备见到她亲手交给她。 一年之约，如期而至。他仿佛在经历一个仪式一般，踏上了前往北极的船。 当他到达北极的时候，被眼前这白雪覆盖的场景给震撼了。 他觉得他来过这里，就像他就属于这里一般。 他兀自地往前走，直到一个木板前停了下来，上面写的是女孩的名字。 他泪如雨下，仿佛自己就是因为自己抛弃了她，才失去了她。他掏出自己写给她的话，准备念给她听。 可是，纸上写着“我不会忘记……”，他抬头，木板上刻着“卒于2016年5月20日”。 回忆蜂拥而至。 2016年5月20日，他们被困北极的风雪中，女孩虚弱地躺在他的怀里，奄奄一息。“你有没有想过我会离开你？”“没有，你不会离开我，我们会结婚生子，会相伴终老。”她笑了，就如他初见他时那般纯粹。 2016年5月21日，他醒来，得知女孩死了，泣不成声，直直地哭晕了过去，醒来开始自言自语，微笑，就像看见自己心仪的女孩一样，那么天真。 2016年6月13日，商场的店员奇怪地看着一个男孩，买了许多化妆品，一边走着，一边和自己有说有笑，幸福的无与伦比。 2016年8月25日，他照着镜子，发现自己竟然是男友的模样，崩溃，开始回忆起一切。 2016年9月4日，“她”痛苦地看着自己的脸庞，开始厌恶自己，想要逃出这个身体。 2016年12月31日，“她”笑着，若有所思地写着。 2017年4月11日，“她”发现“她”心软了，可是自己只是为了生存。 2017年4月12日，“她”选择放弃，不再写，就当一切都没发生过。 “原来你一直都在我身边。” “你有没有想过我会离开你？” “没有。” “那你会来陪我吗？” “嗯。” 男孩应声倒下，微笑着，正如初见时的模样。 极光出现在北极上空，这壮丽的景象，是多少人梦寐以求的。 男孩睁开眼睛，笑容早已消失，看着眼前的极光， 用低沉的声音说道：“我最喜欢看极光了。” 那张纸被丢落在地上，仿佛与白雪融合，雪水浸透，“我不会忘记当年你丢下我，一个人窝囊地离开。”","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}],"author":"Zhen Liu"},{"title":"毕业晚会有感","slug":"毕业晚会有感","date":"2019-06-11T14:56:00.000Z","updated":"2019-06-11T15:01:14.060Z","comments":true,"path":"2019/06/11/毕业晚会有感/","link":"","permalink":"http://yoursite.com/2019/06/11/毕业晚会有感/","excerpt":"","text":"其实，本来也没有想过去弄一个节目，只是想趁着大学结束的时候，去好好的给自己一次尝试和一次锻炼。 事情是这样的（长话短说）：有一天洗澡的时候，唱起了《合照》，心想弄一次合唱，给大家大学一个完美的句点。然后就弄了。 选了很多很支持我的人，也相信我们能完成一个美好的秀。 其实困难有很多，也不算很多。现在过去了，真的就像一个体验——借教室，教唱歌，选走位，租衣服，集合大家… 本来的歌也改了又改，最后选了房间和we will rock you。但真的，很感谢这个班级给了我一次尝试，也让我有不同的体验（以前的我可能就躲在后面，说，大家可以我就可以）这可能也是我在大学的一个成长。 我们有过大雨倾盆时，来202艰苦训练；也有在烈日下，在信操拍视频。 最后结果也超棒，当我们演出完喊出victory，当我们一起快乐的在门口合影，当我们… 虽然我们这个班，算是缘分相遇，中间稍有疏离，但还是能让人感受那种久违的归属感。 真的很感谢各位，真的很感谢那些为这些节目贡献的每一个人，希望这也能成为你们美好的回忆。 房间的歌词真的细看会哭，”在这温暖的房间，我于是慢慢发现，相聚其实是一种缘，多值得纪念“ 百度云链接列表（福利放送时间哈哈哈哈）： 1504合唱1.0（中间有一段画面停了，但声音有）：链接：https://pan.baidu.com/s/1OVNU_3tjCdaja874DDy13g 提取码：fgly 复制这段内容后打开百度网盘手机App，操作更方便哦 1504合唱2.0（手录的，感觉还可以，还有3.0的哈哈哈）：链接：https://pan.baidu.com/s/1OqSDxX-P3WvsY68qyY137w 提取码：oimj 复制这段内容后打开百度网盘手机App，操作更方便哦 创造101后半段（只有后半段凑活看吧）：链接：https://pan.baidu.com/s/1OqSDxX-P3WvsY68qyY137w 提取码：oimj 复制这段内容后打开百度网盘手机App，操作更方便哦 创造101lazy直拍（哈哈哈真的感谢萌萌了，前面也是他录的）：链接：https://pan.baidu.com/s/1u04mX3wGCQI2zxqu9L_zbg 提取码：yj8z 复制这段内容后打开百度网盘手机App，操作更方便哦 四班合唱背景视频（就是BGM+超有诚意的视频）：链接：https://pan.baidu.com/s/1f8pzFp1M8KHVx8LA0-RVPA 提取码：y8kt 复制这段内容后打开百度网盘手机App，操作更方便哦 关于跳舞，哈哈哈哈，其实我早就想跳了，甚至想找舞协的学妹，问他们有没有节目。所以一听到水皮他们班有节目就厚着脸皮去了，2班的人都超好哈哈哈哈。 由于晚去了一节课的我，就努力学习，争取跟上他们。 哈哈哈还记得每天晚上练完之后还会自己再多练几遍，也希望能尽善尽美吧（当时好像还要答辩哈哈哈哈） 真的，最后我觉得没有对不起自己的努力，动作没错！！！（大家可以看视频，每个都踩了点哈哈哈哈） 或许，我可以往唱跳型歌手发展？？？哈哈哈哈 关于离别，最后当大家大合影的时候，我坐在台下，看着他们。觉得，快乐的结束都是映衬着相反的感受。 我习惯了大家在校园里想见就见，习惯了为学习和出去玩而去烦恼，习惯了现在的每一次尝试都是新鲜而有趣。 所以，我不知道如何和大家再见，不想刻意让这件事成为一个仪式，也不想让自己有遗憾。 那些关心我，在意我，帮助我的人，我真的想，如果可以，我能写一封长长的信，去感谢你们在我人生中的意义。 哈哈哈哈，我经常和别人说，我仪式感很重，可能只是对想让自己在每一个阶段，可以和每个人有一个完美的记忆节点。 哈哈哈哈，人一闲下来就会多想，忙的时候，想睡就睡，哪有闲工夫想这些。 最后，祝大家毕业快乐，活出自己想要生活的样子！！！","categories":[],"tags":[{"name":"生活感怀","slug":"生活感怀","permalink":"http://yoursite.com/tags/生活感怀/"}],"author":"Zhen Liu"},{"title":"hexo_admin编写博客","slug":"第一篇blog","date":"2019-06-11T09:08:00.000Z","updated":"2019-06-11T14:53:19.031Z","comments":true,"path":"2019/06/11/第一篇blog/","link":"","permalink":"http://yoursite.com/2019/06/11/第一篇blog/","excerpt":"","text":"介绍一下如何利用hexo_admin对文章进行编写。 进入localhost:4000/admin/进行代码编写； 开始编写文章。 复制粘贴拷图片。 点击Deploy。选择发布。 官方文档： 用hexo_admin进行编写：https://albenw.github.io/posts/4ffa5bc6/ markdown入门指南：https://www.jianshu.com/p/1e402922ee32/ 该风格简介文档：https://github.com/iTimeTraveler/hexo-theme-hipaper 官方给的writing：https://hexo.io/docs/writing.html 该风格的问答板块：https://gitter.im/hexo-theme-hiker/Lobby?utm_source=share-link&amp;utm_medium=link&amp;utm_campaign=share-link","categories":[],"tags":[{"name":"编程总结","slug":"编程总结","permalink":"http://yoursite.com/tags/编程总结/"}]}]}